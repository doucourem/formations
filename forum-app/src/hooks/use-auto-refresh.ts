import { useEffect } from 'react';
import { useQueryClient } from '@tanstack/react-query';
import { useAuth } from '@/contexts/auth-context';

// Auto-refresh hook pour mettre √† jour toutes les donn√©es automatiquement
export function useAutoRefresh() {
  const queryClient = useQueryClient();
  const { user } = useAuth();

  useEffect(() => {
    if (!user) return;

    // Fonction pour invalider toutes les requ√™tes importantes
    const refreshAllData = () => {
      // Invalider toutes les donn√©es de base
      queryClient.invalidateQueries({ queryKey: ['/api/transactions'] });
      queryClient.invalidateQueries({ queryKey: ['/api/clients'] });
      queryClient.invalidateQueries({ queryKey: ['/api/stats/user'] });
      queryClient.invalidateQueries({ queryKey: ['/api/stats/daily-user'] });
      queryClient.invalidateQueries({ queryKey: ['/api/system/settings'] });
      
      if (user.role === 'admin') {
        // Donn√©es sp√©cifiques admin
        queryClient.invalidateQueries({ queryKey: ['/api/stats/daily'] });
        queryClient.invalidateQueries({ queryKey: ['/api/users'] });
        queryClient.invalidateQueries({ queryKey: ['/api/notifications'] });
      }
    };

    // Rafra√Æchissement imm√©diat au focus de la fen√™tre
    const handleFocus = () => {
      refreshAllData();
    };

    // Rafra√Æchissement p√©riodique tr√®s r√©duit - WebSocket s'occupe des mises √† jour temps r√©el
    const interval = setInterval(refreshAllData, user.role === 'admin' ? 5 * 60 * 1000 : 10 * 60 * 1000);

    window.addEventListener('focus', handleFocus);

    return () => {
      clearInterval(interval);
      window.removeEventListener('focus', handleFocus);
    };
  }, [user, queryClient]);

  // Fonction pour forcer un rafra√Æchissement imm√©diat intelligent
  const forceRefresh = () => {
    console.log('üîÑ [FORCE REFRESH] D√©but du rafra√Æchissement complet...');
    
    // Vider le cache complet
    queryClient.clear();
    
    // Invalider toutes les queries avec refetch imm√©diat
    const refreshPromises = [
      queryClient.invalidateQueries({ queryKey: ['/api/transactions'], refetchType: 'all' }),
      queryClient.invalidateQueries({ queryKey: ['/api/clients'], refetchType: 'all' }),
      queryClient.invalidateQueries({ queryKey: ['/api/stats/user'], refetchType: 'all' }),
      queryClient.invalidateQueries({ queryKey: ['/api/stats/daily-user'], refetchType: 'all' }),
      queryClient.invalidateQueries({ queryKey: ['/api/system/settings'], refetchType: 'all' }),
      queryClient.invalidateQueries({ queryKey: ['/api/user/can-send'], refetchType: 'all' }),
      queryClient.invalidateQueries({ queryKey: ['/api/user/profile'], refetchType: 'all' })
    ];

    if (user?.role === 'admin') {
      refreshPromises.push(
        queryClient.invalidateQueries({ queryKey: ['/api/stats/daily'], refetchType: 'all' }),
        queryClient.invalidateQueries({ queryKey: ['/api/users'], refetchType: 'all' }),
        queryClient.invalidateQueries({ queryKey: ['/api/notifications'], refetchType: 'all' }),
        queryClient.invalidateQueries({ queryKey: ['/api/transactions/pending'], refetchType: 'all' }),
        queryClient.invalidateQueries({ queryKey: ['/api/transactions/validated'], refetchType: 'all' })
      );
    }

    // Attendre que toutes les invalidations soient termin√©es
    Promise.allSettled(refreshPromises).then(() => {
      console.log('‚úÖ [FORCE REFRESH] Rafra√Æchissement termin√©');
    });
  };

  return { forceRefresh };
}